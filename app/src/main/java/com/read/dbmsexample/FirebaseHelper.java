package com.read.dbmsexample;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseException;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;

public class FirebaseHelper {

    private DatabaseReference databaseReference;
    private Boolean saved, modified, deleted;
    private ArrayList<User> users = new ArrayList<>();
    private BaseAdapter adapter;
    private ValueEventListener listViewListener;
    private ChildEventListener selectedUserEventListener;
    private User selected;

    /**
     * Provides methods to manage the Users in a database, populate a ListView with Users from the
     * database as the database changes, and setup a listener to close an activity when a specific
     * User in the database is changed.
     */
    public FirebaseHelper() {
        this.databaseReference = FirebaseDatabase.getInstance().getReference();
    }

    /**
     * Saves a new User to the database. If a User with a null key is passed, the key will be
     * automatically generated.
     *
     * @param user The User to be saved.
     * @return The status of the save.
     */
    public Boolean save(User user) {
        // Verify that User is a valid object.
        if (user == null) {
            saved = false;
        }
        // Try to save the User to the database. Watch out for a database error.
        else {
            try {
                // If key of the passed User is null, set its key as a unique key generated by the database.
                if (user.getKey() == null) {
                    user.setKey(databaseReference.child("Users").push().getKey());
                }

                databaseReference.child("Users").child(user.getKey()).setValue(user);
                saved = true;

            } catch (DatabaseException e) {
                e.printStackTrace();
                saved = false;
            }
        }
        return saved;
    }

    /**
     * Deletes a User from the database.
     *
     * @param user The User to be deleted.
     * @return The status of the deletion.
     */
    public Boolean delete(User user) {
        // Verify that User is a valid object.
        if (user == null) {
            deleted = false;
        }
        // Try to delete the User from the database. Watch out for a database error.
        else {
            try {
                databaseReference.child("Users").child(user.getKey()).removeValue();
                deleted = true;
            } catch (DatabaseException e) {
                e.printStackTrace();
                deleted = false;
            }
        }
        return deleted;
    }

    /**
     * Deletes an existing User from the database and replaces it with a new User.
     *
     * @param oldUser The User to be deleted.
     * @param newUser The User to replace the deleted.
     */
    public Boolean modify(User oldUser, User newUser) {
        // Delete User oldUser from the database.
        modified = this.delete(oldUser);

        // If deletion of User oldUser is successful, save User newUser to the database.
        if (modified) {
            modified = this.save(newUser);
        } else {
            modified = false;
        }
        return modified;
    }

    /**
     * Defines and attaches a custom BaseAdapter to a ListView. The adapter defines how each view of
     * the ListView should be populated with User attributes and what to do in response to view
     * clicks.
     *
     * @param context  Context from the class the method is called from.
     * @param listView The ListView to receive the adapter.
     */
    public void attachListViewAdapter(final Context context, final ListView listView) {
        // Define the BaseAdapter.
        adapter = new BaseAdapter() {
            /**
             * @return The number of items in the data set represented by this BaseAdapter.
             */
            @Override
            public int getCount() {
                return users.size();
            }

            /**
             * @return The object associated with the specified position in the data set.
             */
            @Override
            public Object getItem(int i) {
                return users.get(i);
            }

            @Override
            public long getItemId(int i) {
                return i;
            }

            /**
             * @return The View that displays the data at the specified position in the data set.
             */
            @Override
            public View getView(final int i, View view, ViewGroup viewGroup) {
                // The layout of a view is defined by listview_single_itemitem.xml.
                if (view == null) {
                    view = LayoutInflater.from(context).inflate(R.layout.listview_single_item, viewGroup, false);
                }

                // Bring XML TextViews to Java.
                TextView name = view.findViewById(R.id.name);
                TextView userName = view.findViewById(R.id.username);
                TextView password = view.findViewById(R.id.password);
                TextView role = view.findViewById(R.id.role);

                /* Set the text of the TextViews as the attributes of the User stored in the
                 * ArrayList at the specified position. */
                name.setText(context.getString(R.string.format_full_name, users.get(i).getFirstName(), users.get(i).getLastName()));
                userName.setText(users.get(i).getUsername());
                password.setText(users.get(i).getPassword());
                role.setText(users.get(i).getRole());

                /* Attach a click listener to the view to open the ModifyUserActivity. Send the
                 * attributes of the User that corresponds to the clicked view to the activity. */
                view.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent(context, ModifyUserActivity.class);

                        intent.putExtra("key", users.get(i).getKey());
                        intent.putExtra("firstName", users.get(i).getFirstName());
                        intent.putExtra("lastName", users.get(i).getLastName());
                        intent.putExtra("username", users.get(i).getUsername());
                        intent.putExtra("password", users.get(i).getPassword());
                        intent.putExtra("role", users.get(i).getRole());

                        context.startActivity(intent);
                    }
                });
                return view;
            }
        };

        // Attach the BaseAdapter to the ListView.
        listView.setAdapter(adapter);
    }

    /**
     * Defines and attaches a listener to the part of the database containing the Users. When that
     * part of the database changes, the listener will notify the Adapter to update its ListView
     * with the most recent Users from the database. This method assumes that the ListView already
     * has an Adapter attached to it.
     *
     * @param context  Context from the class the method is called from.
     */
    public void startUpdatingListView(final Context context) {
        // Define the listener.
        listViewListener = new ValueEventListener() {
            /**
             * If the database is changed, clear the outdated Users from the ArrayList and store
             * the current Users to the ArrayList from the database and notify the Adapter to update
             * its ListView.
             */
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                // Clear the ArrayList.
                users.clear();

                // Store new Users in the ArrayList from the database.
                for (DataSnapshot ds : dataSnapshot.getChildren()) {
                    User user = ds.getValue(User.class);
                    users.add(user);
                }

                // Notify the Adapter to update its ListView.
                adapter.notifyDataSetChanged();
            }

            /**
             * If a database error occurs, print a Toast indicating the error.
             */
            @Override
            public void onCancelled(DatabaseError databaseError) {
                Log.d("TAG", databaseError.getMessage());
                Toast.makeText(context, context.getString(R.string.toast_database_error, databaseError.getMessage()), Toast.LENGTH_LONG).show();
            }
        };

        // Attach the listener to the part of the database that contains the Users.
        databaseReference.child("Users").addValueEventListener(listViewListener);
    }

    /**
     * Removes the listener from the part of the database containing the Users.
     */
    public void stopUpdatingListView() {
        databaseReference.child("Users").removeEventListener(listViewListener);
    }

    /**
     * Defines and attaches a listener to a single User of the database. When that particular User
     * changes, the listener will print a Toast indicating that this has happened and close the
     * activity the user is currently in.
     *
     * @param context Context from the class the method is called from.
     * @param user The User in the database to receive the listener.
     */
    public void startListeningForChangedUser(final Context context, User user) {
        // Store the User that will receive the listener.
        selected = user;

        // Define the listener.
        selectedUserEventListener = new ChildEventListener() {
            @Override
            public void onChildAdded(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {

            }

            @Override
            public void onChildChanged(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {

            }

            /**
             * If the User is changed, print a Toast indicating so and close the activity the user
             * is currently in.
             */
            @Override
            public void onChildRemoved(@NonNull DataSnapshot dataSnapshot) {
                Toast.makeText(context, R.string.toast_changed, Toast.LENGTH_SHORT).show();
                ((Activity) context).finish();
            }

            @Override
            public void onChildMoved(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {

            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        };

        // Attach the listener to the User.
        databaseReference.child("Users").child(selected.getKey()).addChildEventListener(selectedUserEventListener);
    }

    /**
     * Removes the listener from the User of the database.
     */
    public void stopListeningForChangedUser() {
        databaseReference.child("Users").child(selected.getKey()).removeEventListener(selectedUserEventListener);
    }
}